#include "treePrivate.h"
static void count_rec(node_t *root,int *none,int *sing,int *doub){
 if(root == NULL) return;
 if(root->left == NULL && root->right == NULL){
  *none = *none + 1; return;
 }
 if(root->left == NULL || root->right == NULL){
  *sing = *sing + 1;
  if(root->left != NULL) count_rec(root->left,none,sing,doub);
  else count_rec(root->right,none,sing,doub);
 }
 if(root->left != NULL && root->right != NULL){
  *doub = *doub + 1;
  count_rec(root->left ,none,sing,doub);
  count_rec(root->right,none,sing,doub);
 }
}
void countNode(node_t *root, int **array){
 array = malloc(3 * sizeof(int));
 int sing = 0, none = 0, doub = 0;
 count_rec(root,&none,&sing,&doub);
 *array[0] = none;
 *array[1] = sing;
 *array[2] = doub;
 printf("%d %d %d",array[0],array[1],array[2]);
}

int count_all(node_t *root){
 int left_no, right_no;
 if(root == NULL) return 0;
 right_no = count_all(root->right);
 left_no = count_all(root->left);
 return (right_no + left_no + 1);
}
